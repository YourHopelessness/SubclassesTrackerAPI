// <auto-generated/>
#nullable enable annotations
#nullable disable warnings

namespace GraphQLClientNS
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial class GetBuffsResult : global::System.IEquatable<GetBuffsResult>, IGetBuffsResult
    {
        public GetBuffsResult(global::GraphQLClientNS.IGetBuffs_ReportData? reportData)
        {
            ReportData = reportData;
        }

        /// <summary>
        /// Obtain the report data object that allows the retrieval of individual reports or filtered collections of reports by guild or by user.
        /// </summary>
        public global::GraphQLClientNS.IGetBuffs_ReportData? ReportData { get; }

        public virtual global::System.Boolean Equals(GetBuffsResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((ReportData is null && other.ReportData is null) || ReportData != null && ReportData.Equals(other.ReportData)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBuffsResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (ReportData != null)
                {
                    hash ^= 397 * ReportData.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// The ReportData object enables the retrieval of single reports or filtered collections of reports.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial class GetBuffs_ReportData_ReportData : global::System.IEquatable<GetBuffs_ReportData_ReportData>, IGetBuffs_ReportData_ReportData
    {
        public GetBuffs_ReportData_ReportData(global::GraphQLClientNS.IGetBuffs_ReportData_Report? report)
        {
            Report = report;
        }

        /// <summary>
        /// Obtain a specific report by its code.
        /// </summary>
        public global::GraphQLClientNS.IGetBuffs_ReportData_Report? Report { get; }

        public virtual global::System.Boolean Equals(GetBuffs_ReportData_ReportData? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Report is null && other.Report is null) || Report != null && Report.Equals(other.Report)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBuffs_ReportData_ReportData)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Report != null)
                {
                    hash ^= 397 * Report.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A single report uploaded by a player to a guild or personal logs.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial class GetBuffs_ReportData_Report_Report : global::System.IEquatable<GetBuffs_ReportData_Report_Report>, IGetBuffs_ReportData_Report_Report
    {
        public GetBuffs_ReportData_Report_Report(global::System.Text.Json.JsonElement? table)
        {
            Table = table;
        }

        /// <summary>
        /// A table of information for a report, filterable via arguments like type, source, target, ability, etc. This data is not considered frozen, and it can change without notice. Use at your own risk.
        /// </summary>
        public global::System.Text.Json.JsonElement? Table { get; }

        public virtual global::System.Boolean Equals(GetBuffs_ReportData_Report_Report? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::System.Object.Equals(Table, other.Table));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetBuffs_ReportData_Report_Report)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Table != null)
                {
                    hash ^= 397 * Table.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial interface IGetBuffsResult
    {
        /// <summary>
        /// Obtain the report data object that allows the retrieval of individual reports or filtered collections of reports by guild or by user.
        /// </summary>
        public global::GraphQLClientNS.IGetBuffs_ReportData? ReportData { get; }
    }

    /// <summary>
    /// The ReportData object enables the retrieval of single reports or filtered collections of reports.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial interface IGetBuffs_ReportData
    {
        /// <summary>
        /// Obtain a specific report by its code.
        /// </summary>
        public global::GraphQLClientNS.IGetBuffs_ReportData_Report? Report { get; }
    }

    /// <summary>
    /// The ReportData object enables the retrieval of single reports or filtered collections of reports.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial interface IGetBuffs_ReportData_ReportData : IGetBuffs_ReportData
    {
    }

    /// <summary>
    /// A single report uploaded by a player to a guild or personal logs.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial interface IGetBuffs_ReportData_Report
    {
        /// <summary>
        /// A table of information for a report, filterable via arguments like type, source, target, ability, etc. This data is not considered frozen, and it can change without notice. Use at your own risk.
        /// </summary>
        public global::System.Text.Json.JsonElement? Table { get; }
    }

    /// <summary>
    /// A single report uploaded by a player to a guild or personal logs.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial interface IGetBuffs_ReportData_Report_Report : IGetBuffs_ReportData_Report
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial class GetFightsResult : global::System.IEquatable<GetFightsResult>, IGetFightsResult
    {
        public GetFightsResult(global::GraphQLClientNS.IGetFights_ReportData? reportData)
        {
            ReportData = reportData;
        }

        /// <summary>
        /// Obtain the report data object that allows the retrieval of individual reports or filtered collections of reports by guild or by user.
        /// </summary>
        public global::GraphQLClientNS.IGetFights_ReportData? ReportData { get; }

        public virtual global::System.Boolean Equals(GetFightsResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((ReportData is null && other.ReportData is null) || ReportData != null && ReportData.Equals(other.ReportData)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetFightsResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (ReportData != null)
                {
                    hash ^= 397 * ReportData.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// The ReportData object enables the retrieval of single reports or filtered collections of reports.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial class GetFights_ReportData_ReportData : global::System.IEquatable<GetFights_ReportData_ReportData>, IGetFights_ReportData_ReportData
    {
        public GetFights_ReportData_ReportData(global::GraphQLClientNS.IGetFights_ReportData_Report? report)
        {
            Report = report;
        }

        /// <summary>
        /// Obtain a specific report by its code.
        /// </summary>
        public global::GraphQLClientNS.IGetFights_ReportData_Report? Report { get; }

        public virtual global::System.Boolean Equals(GetFights_ReportData_ReportData? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Report is null && other.Report is null) || Report != null && Report.Equals(other.Report)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetFights_ReportData_ReportData)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Report != null)
                {
                    hash ^= 397 * Report.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A single report uploaded by a player to a guild or personal logs.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial class GetFights_ReportData_Report_Report : global::System.IEquatable<GetFights_ReportData_Report_Report>, IGetFights_ReportData_Report_Report
    {
        public GetFights_ReportData_Report_Report(global::System.Collections.Generic.IReadOnlyList<global::GraphQLClientNS.IGetFights_ReportData_Report_Fights?>? fights)
        {
            Fights = fights;
        }

        /// <summary>
        /// A set of fights with details about participating players.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::GraphQLClientNS.IGetFights_ReportData_Report_Fights?>? Fights { get; }

        public virtual global::System.Boolean Equals(GetFights_ReportData_Report_Report? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(Fights, other.Fights));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetFights_ReportData_Report_Report)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Fights != null)
                {
                    foreach (var Fights_elm in Fights)
                    {
                        if (Fights_elm != null)
                        {
                            hash ^= 397 * Fights_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// The ReportFight represents a single fight that occurs in the report.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial class GetFights_ReportData_Report_Fights_ReportFight : global::System.IEquatable<GetFights_ReportData_Report_Fights_ReportFight>, IGetFights_ReportData_Report_Fights_ReportFight
    {
        public GetFights_ReportData_Report_Fights_ReportFight(global::System.Int32 id, global::System.String name)
        {
            Id = id;
            Name = name;
        }

        /// <summary>
        /// The report ID of the fight. This ID can be used to fetch only events, tables or graphs for this fight.
        /// </summary>
        public global::System.Int32 Id { get; }
        /// <summary>
        /// The name of the fight.
        /// </summary>
        public global::System.String Name { get; }

        public virtual global::System.Boolean Equals(GetFights_ReportData_Report_Fights_ReportFight? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::System.Object.Equals(Id, other.Id)) && Name.Equals(other.Name);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetFights_ReportData_Report_Fights_ReportFight)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial interface IGetFightsResult
    {
        /// <summary>
        /// Obtain the report data object that allows the retrieval of individual reports or filtered collections of reports by guild or by user.
        /// </summary>
        public global::GraphQLClientNS.IGetFights_ReportData? ReportData { get; }
    }

    /// <summary>
    /// The ReportData object enables the retrieval of single reports or filtered collections of reports.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial interface IGetFights_ReportData
    {
        /// <summary>
        /// Obtain a specific report by its code.
        /// </summary>
        public global::GraphQLClientNS.IGetFights_ReportData_Report? Report { get; }
    }

    /// <summary>
    /// The ReportData object enables the retrieval of single reports or filtered collections of reports.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial interface IGetFights_ReportData_ReportData : IGetFights_ReportData
    {
    }

    /// <summary>
    /// A single report uploaded by a player to a guild or personal logs.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial interface IGetFights_ReportData_Report
    {
        /// <summary>
        /// A set of fights with details about participating players.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::GraphQLClientNS.IGetFights_ReportData_Report_Fights?>? Fights { get; }
    }

    /// <summary>
    /// A single report uploaded by a player to a guild or personal logs.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial interface IGetFights_ReportData_Report_Report : IGetFights_ReportData_Report
    {
    }

    /// <summary>
    /// The ReportFight represents a single fight that occurs in the report.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial interface IGetFights_ReportData_Report_Fights
    {
        /// <summary>
        /// The report ID of the fight. This ID can be used to fetch only events, tables or graphs for this fight.
        /// </summary>
        public global::System.Int32 Id { get; }
        /// <summary>
        /// The name of the fight.
        /// </summary>
        public global::System.String Name { get; }
    }

    /// <summary>
    /// The ReportFight represents a single fight that occurs in the report.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial interface IGetFights_ReportData_Report_Fights_ReportFight : IGetFights_ReportData_Report_Fights
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial class GetPlayersResult : global::System.IEquatable<GetPlayersResult>, IGetPlayersResult
    {
        public GetPlayersResult(global::GraphQLClientNS.IGetPlayers_ReportData? reportData)
        {
            ReportData = reportData;
        }

        /// <summary>
        /// Obtain the report data object that allows the retrieval of individual reports or filtered collections of reports by guild or by user.
        /// </summary>
        public global::GraphQLClientNS.IGetPlayers_ReportData? ReportData { get; }

        public virtual global::System.Boolean Equals(GetPlayersResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((ReportData is null && other.ReportData is null) || ReportData != null && ReportData.Equals(other.ReportData)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPlayersResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (ReportData != null)
                {
                    hash ^= 397 * ReportData.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// The ReportData object enables the retrieval of single reports or filtered collections of reports.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial class GetPlayers_ReportData_ReportData : global::System.IEquatable<GetPlayers_ReportData_ReportData>, IGetPlayers_ReportData_ReportData
    {
        public GetPlayers_ReportData_ReportData(global::GraphQLClientNS.IGetPlayers_ReportData_Report? report)
        {
            Report = report;
        }

        /// <summary>
        /// Obtain a specific report by its code.
        /// </summary>
        public global::GraphQLClientNS.IGetPlayers_ReportData_Report? Report { get; }

        public virtual global::System.Boolean Equals(GetPlayers_ReportData_ReportData? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Report is null && other.Report is null) || Report != null && Report.Equals(other.Report)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPlayers_ReportData_ReportData)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Report != null)
                {
                    hash ^= 397 * Report.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A single report uploaded by a player to a guild or personal logs.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial class GetPlayers_ReportData_Report_Report : global::System.IEquatable<GetPlayers_ReportData_Report_Report>, IGetPlayers_ReportData_Report_Report
    {
        public GetPlayers_ReportData_Report_Report(global::System.Text.Json.JsonElement? table)
        {
            Table = table;
        }

        /// <summary>
        /// A table of information for a report, filterable via arguments like type, source, target, ability, etc. This data is not considered frozen, and it can change without notice. Use at your own risk.
        /// </summary>
        public global::System.Text.Json.JsonElement? Table { get; }

        public virtual global::System.Boolean Equals(GetPlayers_ReportData_Report_Report? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::System.Object.Equals(Table, other.Table));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPlayers_ReportData_Report_Report)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Table != null)
                {
                    hash ^= 397 * Table.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial interface IGetPlayersResult
    {
        /// <summary>
        /// Obtain the report data object that allows the retrieval of individual reports or filtered collections of reports by guild or by user.
        /// </summary>
        public global::GraphQLClientNS.IGetPlayers_ReportData? ReportData { get; }
    }

    /// <summary>
    /// The ReportData object enables the retrieval of single reports or filtered collections of reports.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial interface IGetPlayers_ReportData
    {
        /// <summary>
        /// Obtain a specific report by its code.
        /// </summary>
        public global::GraphQLClientNS.IGetPlayers_ReportData_Report? Report { get; }
    }

    /// <summary>
    /// The ReportData object enables the retrieval of single reports or filtered collections of reports.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial interface IGetPlayers_ReportData_ReportData : IGetPlayers_ReportData
    {
    }

    /// <summary>
    /// A single report uploaded by a player to a guild or personal logs.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial interface IGetPlayers_ReportData_Report
    {
        /// <summary>
        /// A table of information for a report, filterable via arguments like type, source, target, ability, etc. This data is not considered frozen, and it can change without notice. Use at your own risk.
        /// </summary>
        public global::System.Text.Json.JsonElement? Table { get; }
    }

    /// <summary>
    /// A single report uploaded by a player to a guild or personal logs.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial interface IGetPlayers_ReportData_Report_Report : IGetPlayers_ReportData_Report
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial class GetReportsWithFightsResult : global::System.IEquatable<GetReportsWithFightsResult>, IGetReportsWithFightsResult
    {
        public GetReportsWithFightsResult(global::GraphQLClientNS.IGetReportsWithFights_ReportData? reportData)
        {
            ReportData = reportData;
        }

        /// <summary>
        /// Obtain the report data object that allows the retrieval of individual reports or filtered collections of reports by guild or by user.
        /// </summary>
        public global::GraphQLClientNS.IGetReportsWithFights_ReportData? ReportData { get; }

        public virtual global::System.Boolean Equals(GetReportsWithFightsResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((ReportData is null && other.ReportData is null) || ReportData != null && ReportData.Equals(other.ReportData)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetReportsWithFightsResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (ReportData != null)
                {
                    hash ^= 397 * ReportData.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// The ReportData object enables the retrieval of single reports or filtered collections of reports.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial class GetReportsWithFights_ReportData_ReportData : global::System.IEquatable<GetReportsWithFights_ReportData_ReportData>, IGetReportsWithFights_ReportData_ReportData
    {
        public GetReportsWithFights_ReportData_ReportData(global::GraphQLClientNS.IGetReportsWithFights_ReportData_Reports? reports)
        {
            Reports = reports;
        }

        /// <summary>
        /// A set of reports for a specific guild, guild tag, or user.
        /// </summary>
        public global::GraphQLClientNS.IGetReportsWithFights_ReportData_Reports? Reports { get; }

        public virtual global::System.Boolean Equals(GetReportsWithFights_ReportData_ReportData? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Reports is null && other.Reports is null) || Reports != null && Reports.Equals(other.Reports)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetReportsWithFights_ReportData_ReportData)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Reports != null)
                {
                    hash ^= 397 * Reports.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial class GetReportsWithFights_ReportData_Reports_ReportPagination : global::System.IEquatable<GetReportsWithFights_ReportData_Reports_ReportPagination>, IGetReportsWithFights_ReportData_Reports_ReportPagination
    {
        public GetReportsWithFights_ReportData_Reports_ReportPagination(global::System.Collections.Generic.IReadOnlyList<global::GraphQLClientNS.IGetReportsWithFights_ReportData_Reports_Data?>? data, global::System.Boolean has_More_Pages)
        {
            Data = data;
            Has_more_pages = has_More_Pages;
        }

        /// <summary>
        /// List of items on the current page
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::GraphQLClientNS.IGetReportsWithFights_ReportData_Reports_Data?>? Data { get; }
        /// <summary>
        /// Determines if cursor has more pages after the current page
        /// </summary>
        public global::System.Boolean Has_more_pages { get; }

        public virtual global::System.Boolean Equals(GetReportsWithFights_ReportData_Reports_ReportPagination? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(Data, other.Data)) && global::System.Object.Equals(Has_more_pages, other.Has_more_pages);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetReportsWithFights_ReportData_Reports_ReportPagination)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Data != null)
                {
                    foreach (var Data_elm in Data)
                    {
                        if (Data_elm != null)
                        {
                            hash ^= 397 * Data_elm.GetHashCode();
                        }
                    }
                }

                hash ^= 397 * Has_more_pages.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// A single report uploaded by a player to a guild or personal logs.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial class GetReportsWithFights_ReportData_Reports_Data_Report : global::System.IEquatable<GetReportsWithFights_ReportData_Reports_Data_Report>, IGetReportsWithFights_ReportData_Reports_Data_Report
    {
        public GetReportsWithFights_ReportData_Reports_Data_Report(global::GraphQLClientNS.IGetReportsWithFights_ReportData_Reports_Data_Zone? zone, global::System.String code, global::System.Collections.Generic.IReadOnlyList<global::GraphQLClientNS.IGetReportsWithFights_ReportData_Reports_Data_Fights?>? fights)
        {
            Zone = zone;
            Code = code;
            Fights = fights;
        }

        /// <summary>
        /// The principal zone that the report contains fights for. Null if no supported zone exists.
        /// </summary>
        public global::GraphQLClientNS.IGetReportsWithFights_ReportData_Reports_Data_Zone? Zone { get; }
        /// <summary>
        /// The report code, a unique value used to identify the report.
        /// </summary>
        public global::System.String Code { get; }
        /// <summary>
        /// A set of fights with details about participating players.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::GraphQLClientNS.IGetReportsWithFights_ReportData_Reports_Data_Fights?>? Fights { get; }

        public virtual global::System.Boolean Equals(GetReportsWithFights_ReportData_Reports_Data_Report? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Zone is null && other.Zone is null) || Zone != null && Zone.Equals(other.Zone))) && Code.Equals(other.Code) && global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(Fights, other.Fights);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetReportsWithFights_ReportData_Reports_Data_Report)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Zone != null)
                {
                    hash ^= 397 * Zone.GetHashCode();
                }

                hash ^= 397 * Code.GetHashCode();
                if (Fights != null)
                {
                    foreach (var Fights_elm in Fights)
                    {
                        if (Fights_elm != null)
                        {
                            hash ^= 397 * Fights_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A single zone from an expansion that represents a raid, dungeon, arena, etc.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial class GetReportsWithFights_ReportData_Reports_Data_Zone_Zone : global::System.IEquatable<GetReportsWithFights_ReportData_Reports_Data_Zone_Zone>, IGetReportsWithFights_ReportData_Reports_Data_Zone_Zone
    {
        public GetReportsWithFights_ReportData_Reports_Data_Zone_Zone(global::System.Int32 id, global::System.String name)
        {
            Id = id;
            Name = name;
        }

        /// <summary>
        /// The ID of the zone.
        /// </summary>
        public global::System.Int32 Id { get; }
        /// <summary>
        /// The name of the zone.
        /// </summary>
        public global::System.String Name { get; }

        public virtual global::System.Boolean Equals(GetReportsWithFights_ReportData_Reports_Data_Zone_Zone? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::System.Object.Equals(Id, other.Id)) && Name.Equals(other.Name);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetReportsWithFights_ReportData_Reports_Data_Zone_Zone)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// The ReportFight represents a single fight that occurs in the report.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial class GetReportsWithFights_ReportData_Reports_Data_Fights_ReportFight : global::System.IEquatable<GetReportsWithFights_ReportData_Reports_Data_Fights_ReportFight>, IGetReportsWithFights_ReportData_Reports_Data_Fights_ReportFight
    {
        public GetReportsWithFights_ReportData_Reports_Data_Fights_ReportFight(global::System.Int32 id, global::System.String name, global::System.Double? trialScore)
        {
            Id = id;
            Name = name;
            TrialScore = trialScore;
        }

        /// <summary>
        /// The report ID of the fight. This ID can be used to fetch only events, tables or graphs for this fight.
        /// </summary>
        public global::System.Int32 Id { get; }
        /// <summary>
        /// The name of the fight.
        /// </summary>
        public global::System.String Name { get; }
        /// <summary>
        /// If the fight is the last encounter in a trial, then the trial score for completion will be present in this field.
        /// </summary>
        public global::System.Double? TrialScore { get; }

        public virtual global::System.Boolean Equals(GetReportsWithFights_ReportData_Reports_Data_Fights_ReportFight? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::System.Object.Equals(Id, other.Id)) && Name.Equals(other.Name) && global::System.Object.Equals(TrialScore, other.TrialScore);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetReportsWithFights_ReportData_Reports_Data_Fights_ReportFight)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                if (TrialScore != null)
                {
                    hash ^= 397 * TrialScore.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial interface IGetReportsWithFightsResult
    {
        /// <summary>
        /// Obtain the report data object that allows the retrieval of individual reports or filtered collections of reports by guild or by user.
        /// </summary>
        public global::GraphQLClientNS.IGetReportsWithFights_ReportData? ReportData { get; }
    }

    /// <summary>
    /// The ReportData object enables the retrieval of single reports or filtered collections of reports.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial interface IGetReportsWithFights_ReportData
    {
        /// <summary>
        /// A set of reports for a specific guild, guild tag, or user.
        /// </summary>
        public global::GraphQLClientNS.IGetReportsWithFights_ReportData_Reports? Reports { get; }
    }

    /// <summary>
    /// The ReportData object enables the retrieval of single reports or filtered collections of reports.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial interface IGetReportsWithFights_ReportData_ReportData : IGetReportsWithFights_ReportData
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial interface IGetReportsWithFights_ReportData_Reports
    {
        /// <summary>
        /// List of items on the current page
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::GraphQLClientNS.IGetReportsWithFights_ReportData_Reports_Data?>? Data { get; }
        /// <summary>
        /// Determines if cursor has more pages after the current page
        /// </summary>
        public global::System.Boolean Has_more_pages { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial interface IGetReportsWithFights_ReportData_Reports_ReportPagination : IGetReportsWithFights_ReportData_Reports
    {
    }

    /// <summary>
    /// A single report uploaded by a player to a guild or personal logs.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial interface IGetReportsWithFights_ReportData_Reports_Data
    {
        /// <summary>
        /// The principal zone that the report contains fights for. Null if no supported zone exists.
        /// </summary>
        public global::GraphQLClientNS.IGetReportsWithFights_ReportData_Reports_Data_Zone? Zone { get; }
        /// <summary>
        /// The report code, a unique value used to identify the report.
        /// </summary>
        public global::System.String Code { get; }
        /// <summary>
        /// A set of fights with details about participating players.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::GraphQLClientNS.IGetReportsWithFights_ReportData_Reports_Data_Fights?>? Fights { get; }
    }

    /// <summary>
    /// A single report uploaded by a player to a guild or personal logs.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial interface IGetReportsWithFights_ReportData_Reports_Data_Report : IGetReportsWithFights_ReportData_Reports_Data
    {
    }

    /// <summary>
    /// A single zone from an expansion that represents a raid, dungeon, arena, etc.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial interface IGetReportsWithFights_ReportData_Reports_Data_Zone
    {
        /// <summary>
        /// The ID of the zone.
        /// </summary>
        public global::System.Int32 Id { get; }
        /// <summary>
        /// The name of the zone.
        /// </summary>
        public global::System.String Name { get; }
    }

    /// <summary>
    /// A single zone from an expansion that represents a raid, dungeon, arena, etc.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial interface IGetReportsWithFights_ReportData_Reports_Data_Zone_Zone : IGetReportsWithFights_ReportData_Reports_Data_Zone
    {
    }

    /// <summary>
    /// The ReportFight represents a single fight that occurs in the report.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial interface IGetReportsWithFights_ReportData_Reports_Data_Fights
    {
        /// <summary>
        /// The report ID of the fight. This ID can be used to fetch only events, tables or graphs for this fight.
        /// </summary>
        public global::System.Int32 Id { get; }
        /// <summary>
        /// The name of the fight.
        /// </summary>
        public global::System.String Name { get; }
        /// <summary>
        /// If the fight is the last encounter in a trial, then the trial score for completion will be present in this field.
        /// </summary>
        public global::System.Double? TrialScore { get; }
    }

    /// <summary>
    /// The ReportFight represents a single fight that occurs in the report.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial interface IGetReportsWithFights_ReportData_Reports_Data_Fights_ReportFight : IGetReportsWithFights_ReportData_Reports_Data_Fights
    {
    }

    /// <summary>
    /// A filter for kills vs wipes and encounters vs trash.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public enum KillType
    {
        /// <summary>
        /// Include trash and encounters.
        /// </summary>
        All,
        /// <summary>
        /// Only include encounters (kills and wipes).
        /// </summary>
        Encounters,
        /// <summary>
        /// Only include encounters that end in a kill.
        /// </summary>
        Kills,
        /// <summary>
        /// Only include trash.
        /// </summary>
        Trash,
        /// <summary>
        /// Only include encounters that end in a wipe.
        /// </summary>
        Wipes
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial class KillTypeSerializer : global::StrawberryShake.Serialization.IInputValueFormatter, global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, KillType>
    {
        public global::System.String TypeName => "KillType";

        public KillType Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
                "All" => KillType.All,
                "Encounters" => KillType.Encounters,
                "Kills" => KillType.Kills,
                "Trash" => KillType.Trash,
                "Wipes" => KillType.Wipes,
                _ => throw new global::StrawberryShake.GraphQLClientException($"String value '{serializedValue}' can't be converted to enum KillType")};
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
                KillType.All => "All",
                KillType.Encounters => "Encounters",
                KillType.Kills => "Kills",
                KillType.Trash => "Trash",
                KillType.Wipes => "Wipes",
                _ => throw new global::StrawberryShake.GraphQLClientException($"Enum KillType value '{runtimeValue}' can't be converted to string")};
        }
    }

    /// <summary>
    /// Represents the operation service of the GetBuffs GraphQL operation
    /// <code>
    /// query GetBuffs($code: String!, $fightIds: [Int!]!, $playerId: Int!) {
    ///   reportData {
    ///     __typename
    ///     report(code: $code) {
    ///       __typename
    ///       table(fightIDs: $fightIds, dataType: Buffs, sourceID: $playerId)
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial class GetBuffsQueryDocument : global::StrawberryShake.IDocument
    {
        private GetBuffsQueryDocument()
        {
        }

        public static GetBuffsQueryDocument Instance { get; } = new GetBuffsQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x71,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x47,
            0x65,
            0x74,
            0x42,
            0x75,
            0x66,
            0x66,
            0x73,
            0x28,
            0x24,
            0x63,
            0x6f,
            0x64,
            0x65,
            0x3a,
            0x20,
            0x53,
            0x74,
            0x72,
            0x69,
            0x6e,
            0x67,
            0x21,
            0x2c,
            0x20,
            0x24,
            0x66,
            0x69,
            0x67,
            0x68,
            0x74,
            0x49,
            0x64,
            0x73,
            0x3a,
            0x20,
            0x5b,
            0x49,
            0x6e,
            0x74,
            0x21,
            0x5d,
            0x21,
            0x2c,
            0x20,
            0x24,
            0x70,
            0x6c,
            0x61,
            0x79,
            0x65,
            0x72,
            0x49,
            0x64,
            0x3a,
            0x20,
            0x49,
            0x6e,
            0x74,
            0x21,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x72,
            0x65,
            0x70,
            0x6f,
            0x72,
            0x74,
            0x44,
            0x61,
            0x74,
            0x61,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x72,
            0x65,
            0x70,
            0x6f,
            0x72,
            0x74,
            0x28,
            0x63,
            0x6f,
            0x64,
            0x65,
            0x3a,
            0x20,
            0x24,
            0x63,
            0x6f,
            0x64,
            0x65,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x74,
            0x61,
            0x62,
            0x6c,
            0x65,
            0x28,
            0x66,
            0x69,
            0x67,
            0x68,
            0x74,
            0x49,
            0x44,
            0x73,
            0x3a,
            0x20,
            0x24,
            0x66,
            0x69,
            0x67,
            0x68,
            0x74,
            0x49,
            0x64,
            0x73,
            0x2c,
            0x20,
            0x64,
            0x61,
            0x74,
            0x61,
            0x54,
            0x79,
            0x70,
            0x65,
            0x3a,
            0x20,
            0x42,
            0x75,
            0x66,
            0x66,
            0x73,
            0x2c,
            0x20,
            0x73,
            0x6f,
            0x75,
            0x72,
            0x63,
            0x65,
            0x49,
            0x44,
            0x3a,
            0x20,
            0x24,
            0x70,
            0x6c,
            0x61,
            0x79,
            0x65,
            0x72,
            0x49,
            0x64,
            0x29,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "fad7a17dff157af88e260e23f6c19c49");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetBuffs GraphQL operation
    /// <code>
    /// query GetBuffs($code: String!, $fightIds: [Int!]!, $playerId: Int!) {
    ///   reportData {
    ///     __typename
    ///     report(code: $code) {
    ///       __typename
    ///       table(fightIDs: $fightIds, dataType: Buffs, sourceID: $playerId)
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial class GetBuffsQuery : global::GraphQLClientNS.IGetBuffsQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetBuffsResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        private readonly System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>> _configure = System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>>.Empty;
        public GetBuffsQuery(global::StrawberryShake.IOperationExecutor<IGetBuffsResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
        }

        private GetBuffsQuery(global::StrawberryShake.IOperationExecutor<IGetBuffsResult> operationExecutor, System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>> configure, global::StrawberryShake.Serialization.IInputValueFormatter @stringFormatter, global::StrawberryShake.Serialization.IInputValueFormatter @intFormatter)
        {
            _operationExecutor = operationExecutor;
            _configure = configure;
            _stringFormatter = @stringFormatter;
            _intFormatter = @intFormatter;
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetBuffsResult);

        public global::GraphQLClientNS.IGetBuffsQuery With(global::System.Action<global::StrawberryShake.OperationRequest> configure)
        {
            return new global::GraphQLClientNS.GetBuffsQuery(_operationExecutor, _configure.Add(configure), _stringFormatter, _intFormatter);
        }

        public global::GraphQLClientNS.IGetBuffsQuery WithRequestUri(global::System.Uri requestUri)
        {
            return With(r => r.ContextData["StrawberryShake.Transport.Http.HttpConnection.RequestUri"] = requestUri);
        }

        public global::GraphQLClientNS.IGetBuffsQuery WithHttpClient(global::System.Net.Http.HttpClient httpClient)
        {
            return With(r => r.ContextData["StrawberryShake.Transport.Http.HttpConnection.HttpClient"] = httpClient);
        }

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetBuffsResult>> ExecuteAsync(global::System.String code, global::System.Collections.Generic.IReadOnlyList<global::System.Int32> fightIds, global::System.Int32 playerId, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(code, fightIds, playerId);
            foreach (var configure in _configure)
            {
                configure(request);
            }

            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetBuffsResult>> Watch(global::System.String code, global::System.Collections.Generic.IReadOnlyList<global::System.Int32> fightIds, global::System.Int32 playerId, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(code, fightIds, playerId);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String code, global::System.Collections.Generic.IReadOnlyList<global::System.Int32> fightIds, global::System.Int32 playerId)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("code", FormatCode(code));
            variables.Add("fightIds", FormatFightIds(fightIds));
            variables.Add("playerId", FormatPlayerId(playerId));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetBuffsQueryDocument.Instance.Hash.Value, name: "GetBuffs", document: GetBuffsQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatCode(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatFightIds(global::System.Collections.Generic.IReadOnlyList<global::System.Int32> value)
        {
            var value_list = new global::System.Collections.Generic.List<global::System.Object?>();
            foreach (var value_elm in value)
            {
                value_list.Add(_intFormatter.Format(value_elm));
            }

            return value_list;
        }

        private global::System.Object? FormatPlayerId(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetBuffs GraphQL operation
    /// <code>
    /// query GetBuffs($code: String!, $fightIds: [Int!]!, $playerId: Int!) {
    ///   reportData {
    ///     __typename
    ///     report(code: $code) {
    ///       __typename
    ///       table(fightIDs: $fightIds, dataType: Buffs, sourceID: $playerId)
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial interface IGetBuffsQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::GraphQLClientNS.IGetBuffsQuery With(global::System.Action<global::StrawberryShake.OperationRequest> configure);
        global::GraphQLClientNS.IGetBuffsQuery WithRequestUri(global::System.Uri requestUri);
        global::GraphQLClientNS.IGetBuffsQuery WithHttpClient(global::System.Net.Http.HttpClient httpClient);
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetBuffsResult>> ExecuteAsync(global::System.String code, global::System.Collections.Generic.IReadOnlyList<global::System.Int32> fightIds, global::System.Int32 playerId, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetBuffsResult>> Watch(global::System.String code, global::System.Collections.Generic.IReadOnlyList<global::System.Int32> fightIds, global::System.Int32 playerId, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetFights GraphQL operation
    /// <code>
    /// query GetFights($code: String!) {
    ///   reportData {
    ///     __typename
    ///     report(code: $code) {
    ///       __typename
    ///       fights {
    ///         __typename
    ///         id
    ///         name
    ///         ... on ReportFight {
    ///           id
    ///         }
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial class GetFightsQueryDocument : global::StrawberryShake.IDocument
    {
        private GetFightsQueryDocument()
        {
        }

        public static GetFightsQueryDocument Instance { get; } = new GetFightsQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x71,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x47,
            0x65,
            0x74,
            0x46,
            0x69,
            0x67,
            0x68,
            0x74,
            0x73,
            0x28,
            0x24,
            0x63,
            0x6f,
            0x64,
            0x65,
            0x3a,
            0x20,
            0x53,
            0x74,
            0x72,
            0x69,
            0x6e,
            0x67,
            0x21,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x72,
            0x65,
            0x70,
            0x6f,
            0x72,
            0x74,
            0x44,
            0x61,
            0x74,
            0x61,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x72,
            0x65,
            0x70,
            0x6f,
            0x72,
            0x74,
            0x28,
            0x63,
            0x6f,
            0x64,
            0x65,
            0x3a,
            0x20,
            0x24,
            0x63,
            0x6f,
            0x64,
            0x65,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x66,
            0x69,
            0x67,
            0x68,
            0x74,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x69,
            0x64,
            0x20,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x52,
            0x65,
            0x70,
            0x6f,
            0x72,
            0x74,
            0x46,
            0x69,
            0x67,
            0x68,
            0x74,
            0x20,
            0x7b,
            0x20,
            0x69,
            0x64,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "7e29c5a6196807889d4968881e0e7f52");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetFights GraphQL operation
    /// <code>
    /// query GetFights($code: String!) {
    ///   reportData {
    ///     __typename
    ///     report(code: $code) {
    ///       __typename
    ///       fights {
    ///         __typename
    ///         id
    ///         name
    ///         ... on ReportFight {
    ///           id
    ///         }
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial class GetFightsQuery : global::GraphQLClientNS.IGetFightsQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetFightsResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        private readonly System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>> _configure = System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>>.Empty;
        public GetFightsQuery(global::StrawberryShake.IOperationExecutor<IGetFightsResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        private GetFightsQuery(global::StrawberryShake.IOperationExecutor<IGetFightsResult> operationExecutor, System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>> configure, global::StrawberryShake.Serialization.IInputValueFormatter @stringFormatter)
        {
            _operationExecutor = operationExecutor;
            _configure = configure;
            _stringFormatter = @stringFormatter;
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetFightsResult);

        public global::GraphQLClientNS.IGetFightsQuery With(global::System.Action<global::StrawberryShake.OperationRequest> configure)
        {
            return new global::GraphQLClientNS.GetFightsQuery(_operationExecutor, _configure.Add(configure), _stringFormatter);
        }

        public global::GraphQLClientNS.IGetFightsQuery WithRequestUri(global::System.Uri requestUri)
        {
            return With(r => r.ContextData["StrawberryShake.Transport.Http.HttpConnection.RequestUri"] = requestUri);
        }

        public global::GraphQLClientNS.IGetFightsQuery WithHttpClient(global::System.Net.Http.HttpClient httpClient)
        {
            return With(r => r.ContextData["StrawberryShake.Transport.Http.HttpConnection.HttpClient"] = httpClient);
        }

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetFightsResult>> ExecuteAsync(global::System.String code, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(code);
            foreach (var configure in _configure)
            {
                configure(request);
            }

            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetFightsResult>> Watch(global::System.String code, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(code);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String code)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("code", FormatCode(code));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetFightsQueryDocument.Instance.Hash.Value, name: "GetFights", document: GetFightsQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatCode(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetFights GraphQL operation
    /// <code>
    /// query GetFights($code: String!) {
    ///   reportData {
    ///     __typename
    ///     report(code: $code) {
    ///       __typename
    ///       fights {
    ///         __typename
    ///         id
    ///         name
    ///         ... on ReportFight {
    ///           id
    ///         }
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial interface IGetFightsQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::GraphQLClientNS.IGetFightsQuery With(global::System.Action<global::StrawberryShake.OperationRequest> configure);
        global::GraphQLClientNS.IGetFightsQuery WithRequestUri(global::System.Uri requestUri);
        global::GraphQLClientNS.IGetFightsQuery WithHttpClient(global::System.Net.Http.HttpClient httpClient);
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetFightsResult>> ExecuteAsync(global::System.String code, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetFightsResult>> Watch(global::System.String code, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetPlayers GraphQL operation
    /// <code>
    /// query GetPlayers($code: String!, $fightIds: [Int!]!) {
    ///   reportData {
    ///     __typename
    ///     report(code: $code) {
    ///       __typename
    ///       table(fightIDs: $fightIds, dataType: Summary)
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial class GetPlayersQueryDocument : global::StrawberryShake.IDocument
    {
        private GetPlayersQueryDocument()
        {
        }

        public static GetPlayersQueryDocument Instance { get; } = new GetPlayersQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x71,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x47,
            0x65,
            0x74,
            0x50,
            0x6c,
            0x61,
            0x79,
            0x65,
            0x72,
            0x73,
            0x28,
            0x24,
            0x63,
            0x6f,
            0x64,
            0x65,
            0x3a,
            0x20,
            0x53,
            0x74,
            0x72,
            0x69,
            0x6e,
            0x67,
            0x21,
            0x2c,
            0x20,
            0x24,
            0x66,
            0x69,
            0x67,
            0x68,
            0x74,
            0x49,
            0x64,
            0x73,
            0x3a,
            0x20,
            0x5b,
            0x49,
            0x6e,
            0x74,
            0x21,
            0x5d,
            0x21,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x72,
            0x65,
            0x70,
            0x6f,
            0x72,
            0x74,
            0x44,
            0x61,
            0x74,
            0x61,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x72,
            0x65,
            0x70,
            0x6f,
            0x72,
            0x74,
            0x28,
            0x63,
            0x6f,
            0x64,
            0x65,
            0x3a,
            0x20,
            0x24,
            0x63,
            0x6f,
            0x64,
            0x65,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x74,
            0x61,
            0x62,
            0x6c,
            0x65,
            0x28,
            0x66,
            0x69,
            0x67,
            0x68,
            0x74,
            0x49,
            0x44,
            0x73,
            0x3a,
            0x20,
            0x24,
            0x66,
            0x69,
            0x67,
            0x68,
            0x74,
            0x49,
            0x64,
            0x73,
            0x2c,
            0x20,
            0x64,
            0x61,
            0x74,
            0x61,
            0x54,
            0x79,
            0x70,
            0x65,
            0x3a,
            0x20,
            0x53,
            0x75,
            0x6d,
            0x6d,
            0x61,
            0x72,
            0x79,
            0x29,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "39805f23502cfabac7c5b121c69380aa");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetPlayers GraphQL operation
    /// <code>
    /// query GetPlayers($code: String!, $fightIds: [Int!]!) {
    ///   reportData {
    ///     __typename
    ///     report(code: $code) {
    ///       __typename
    ///       table(fightIDs: $fightIds, dataType: Summary)
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial class GetPlayersQuery : global::GraphQLClientNS.IGetPlayersQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetPlayersResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        private readonly System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>> _configure = System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>>.Empty;
        public GetPlayersQuery(global::StrawberryShake.IOperationExecutor<IGetPlayersResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
        }

        private GetPlayersQuery(global::StrawberryShake.IOperationExecutor<IGetPlayersResult> operationExecutor, System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>> configure, global::StrawberryShake.Serialization.IInputValueFormatter @stringFormatter, global::StrawberryShake.Serialization.IInputValueFormatter @intFormatter)
        {
            _operationExecutor = operationExecutor;
            _configure = configure;
            _stringFormatter = @stringFormatter;
            _intFormatter = @intFormatter;
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetPlayersResult);

        public global::GraphQLClientNS.IGetPlayersQuery With(global::System.Action<global::StrawberryShake.OperationRequest> configure)
        {
            return new global::GraphQLClientNS.GetPlayersQuery(_operationExecutor, _configure.Add(configure), _stringFormatter, _intFormatter);
        }

        public global::GraphQLClientNS.IGetPlayersQuery WithRequestUri(global::System.Uri requestUri)
        {
            return With(r => r.ContextData["StrawberryShake.Transport.Http.HttpConnection.RequestUri"] = requestUri);
        }

        public global::GraphQLClientNS.IGetPlayersQuery WithHttpClient(global::System.Net.Http.HttpClient httpClient)
        {
            return With(r => r.ContextData["StrawberryShake.Transport.Http.HttpConnection.HttpClient"] = httpClient);
        }

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetPlayersResult>> ExecuteAsync(global::System.String code, global::System.Collections.Generic.IReadOnlyList<global::System.Int32> fightIds, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(code, fightIds);
            foreach (var configure in _configure)
            {
                configure(request);
            }

            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetPlayersResult>> Watch(global::System.String code, global::System.Collections.Generic.IReadOnlyList<global::System.Int32> fightIds, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(code, fightIds);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String code, global::System.Collections.Generic.IReadOnlyList<global::System.Int32> fightIds)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("code", FormatCode(code));
            variables.Add("fightIds", FormatFightIds(fightIds));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetPlayersQueryDocument.Instance.Hash.Value, name: "GetPlayers", document: GetPlayersQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatCode(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatFightIds(global::System.Collections.Generic.IReadOnlyList<global::System.Int32> value)
        {
            var value_list = new global::System.Collections.Generic.List<global::System.Object?>();
            foreach (var value_elm in value)
            {
                value_list.Add(_intFormatter.Format(value_elm));
            }

            return value_list;
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetPlayers GraphQL operation
    /// <code>
    /// query GetPlayers($code: String!, $fightIds: [Int!]!) {
    ///   reportData {
    ///     __typename
    ///     report(code: $code) {
    ///       __typename
    ///       table(fightIDs: $fightIds, dataType: Summary)
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial interface IGetPlayersQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::GraphQLClientNS.IGetPlayersQuery With(global::System.Action<global::StrawberryShake.OperationRequest> configure);
        global::GraphQLClientNS.IGetPlayersQuery WithRequestUri(global::System.Uri requestUri);
        global::GraphQLClientNS.IGetPlayersQuery WithHttpClient(global::System.Net.Http.HttpClient httpClient);
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetPlayersResult>> ExecuteAsync(global::System.String code, global::System.Collections.Generic.IReadOnlyList<global::System.Int32> fightIds, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetPlayersResult>> Watch(global::System.String code, global::System.Collections.Generic.IReadOnlyList<global::System.Int32> fightIds, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetReportsWithFights GraphQL operation
    /// <code>
    /// query GetReportsWithFights($zoneID: Int!, $page: Int!, $limit: Int!, $difficulty: Int, $killType: KillType) {
    ///   reportData {
    ///     __typename
    ///     reports(zoneID: $zoneID, page: $page, limit: $limit) {
    ///       __typename
    ///       data {
    ///         __typename
    ///         zone {
    ///           __typename
    ///           id
    ///           name
    ///           ... on Zone {
    ///             id
    ///           }
    ///         }
    ///         code
    ///         fights(difficulty: $difficulty, killType: $killType) {
    ///           __typename
    ///           id
    ///           name
    ///           trialScore
    ///           ... on ReportFight {
    ///             id
    ///           }
    ///         }
    ///       }
    ///       has_more_pages
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial class GetReportsWithFightsQueryDocument : global::StrawberryShake.IDocument
    {
        private GetReportsWithFightsQueryDocument()
        {
        }

        public static GetReportsWithFightsQueryDocument Instance { get; } = new GetReportsWithFightsQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x71,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x47,
            0x65,
            0x74,
            0x52,
            0x65,
            0x70,
            0x6f,
            0x72,
            0x74,
            0x73,
            0x57,
            0x69,
            0x74,
            0x68,
            0x46,
            0x69,
            0x67,
            0x68,
            0x74,
            0x73,
            0x28,
            0x24,
            0x7a,
            0x6f,
            0x6e,
            0x65,
            0x49,
            0x44,
            0x3a,
            0x20,
            0x49,
            0x6e,
            0x74,
            0x21,
            0x2c,
            0x20,
            0x24,
            0x70,
            0x61,
            0x67,
            0x65,
            0x3a,
            0x20,
            0x49,
            0x6e,
            0x74,
            0x21,
            0x2c,
            0x20,
            0x24,
            0x6c,
            0x69,
            0x6d,
            0x69,
            0x74,
            0x3a,
            0x20,
            0x49,
            0x6e,
            0x74,
            0x21,
            0x2c,
            0x20,
            0x24,
            0x64,
            0x69,
            0x66,
            0x66,
            0x69,
            0x63,
            0x75,
            0x6c,
            0x74,
            0x79,
            0x3a,
            0x20,
            0x49,
            0x6e,
            0x74,
            0x2c,
            0x20,
            0x24,
            0x6b,
            0x69,
            0x6c,
            0x6c,
            0x54,
            0x79,
            0x70,
            0x65,
            0x3a,
            0x20,
            0x4b,
            0x69,
            0x6c,
            0x6c,
            0x54,
            0x79,
            0x70,
            0x65,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x72,
            0x65,
            0x70,
            0x6f,
            0x72,
            0x74,
            0x44,
            0x61,
            0x74,
            0x61,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x72,
            0x65,
            0x70,
            0x6f,
            0x72,
            0x74,
            0x73,
            0x28,
            0x7a,
            0x6f,
            0x6e,
            0x65,
            0x49,
            0x44,
            0x3a,
            0x20,
            0x24,
            0x7a,
            0x6f,
            0x6e,
            0x65,
            0x49,
            0x44,
            0x2c,
            0x20,
            0x70,
            0x61,
            0x67,
            0x65,
            0x3a,
            0x20,
            0x24,
            0x70,
            0x61,
            0x67,
            0x65,
            0x2c,
            0x20,
            0x6c,
            0x69,
            0x6d,
            0x69,
            0x74,
            0x3a,
            0x20,
            0x24,
            0x6c,
            0x69,
            0x6d,
            0x69,
            0x74,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x64,
            0x61,
            0x74,
            0x61,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x7a,
            0x6f,
            0x6e,
            0x65,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x69,
            0x64,
            0x20,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x5a,
            0x6f,
            0x6e,
            0x65,
            0x20,
            0x7b,
            0x20,
            0x69,
            0x64,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x63,
            0x6f,
            0x64,
            0x65,
            0x20,
            0x66,
            0x69,
            0x67,
            0x68,
            0x74,
            0x73,
            0x28,
            0x64,
            0x69,
            0x66,
            0x66,
            0x69,
            0x63,
            0x75,
            0x6c,
            0x74,
            0x79,
            0x3a,
            0x20,
            0x24,
            0x64,
            0x69,
            0x66,
            0x66,
            0x69,
            0x63,
            0x75,
            0x6c,
            0x74,
            0x79,
            0x2c,
            0x20,
            0x6b,
            0x69,
            0x6c,
            0x6c,
            0x54,
            0x79,
            0x70,
            0x65,
            0x3a,
            0x20,
            0x24,
            0x6b,
            0x69,
            0x6c,
            0x6c,
            0x54,
            0x79,
            0x70,
            0x65,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x69,
            0x64,
            0x20,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x74,
            0x72,
            0x69,
            0x61,
            0x6c,
            0x53,
            0x63,
            0x6f,
            0x72,
            0x65,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x52,
            0x65,
            0x70,
            0x6f,
            0x72,
            0x74,
            0x46,
            0x69,
            0x67,
            0x68,
            0x74,
            0x20,
            0x7b,
            0x20,
            0x69,
            0x64,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x68,
            0x61,
            0x73,
            0x5f,
            0x6d,
            0x6f,
            0x72,
            0x65,
            0x5f,
            0x70,
            0x61,
            0x67,
            0x65,
            0x73,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "cf0f97f59c03d7a71481496d8450daf6");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetReportsWithFights GraphQL operation
    /// <code>
    /// query GetReportsWithFights($zoneID: Int!, $page: Int!, $limit: Int!, $difficulty: Int, $killType: KillType) {
    ///   reportData {
    ///     __typename
    ///     reports(zoneID: $zoneID, page: $page, limit: $limit) {
    ///       __typename
    ///       data {
    ///         __typename
    ///         zone {
    ///           __typename
    ///           id
    ///           name
    ///           ... on Zone {
    ///             id
    ///           }
    ///         }
    ///         code
    ///         fights(difficulty: $difficulty, killType: $killType) {
    ///           __typename
    ///           id
    ///           name
    ///           trialScore
    ///           ... on ReportFight {
    ///             id
    ///           }
    ///         }
    ///       }
    ///       has_more_pages
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial class GetReportsWithFightsQuery : global::GraphQLClientNS.IGetReportsWithFightsQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetReportsWithFightsResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _killTypeFormatter;
        private readonly System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>> _configure = System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>>.Empty;
        public GetReportsWithFightsQuery(global::StrawberryShake.IOperationExecutor<IGetReportsWithFightsResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
            _killTypeFormatter = serializerResolver.GetInputValueFormatter("KillType");
        }

        private GetReportsWithFightsQuery(global::StrawberryShake.IOperationExecutor<IGetReportsWithFightsResult> operationExecutor, System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>> configure, global::StrawberryShake.Serialization.IInputValueFormatter killTypeFormatter, global::StrawberryShake.Serialization.IInputValueFormatter @intFormatter)
        {
            _operationExecutor = operationExecutor;
            _configure = configure;
            _killTypeFormatter = killTypeFormatter;
            _intFormatter = @intFormatter;
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetReportsWithFightsResult);

        public global::GraphQLClientNS.IGetReportsWithFightsQuery With(global::System.Action<global::StrawberryShake.OperationRequest> configure)
        {
            return new global::GraphQLClientNS.GetReportsWithFightsQuery(_operationExecutor, _configure.Add(configure), _killTypeFormatter, _intFormatter);
        }

        public global::GraphQLClientNS.IGetReportsWithFightsQuery WithRequestUri(global::System.Uri requestUri)
        {
            return With(r => r.ContextData["StrawberryShake.Transport.Http.HttpConnection.RequestUri"] = requestUri);
        }

        public global::GraphQLClientNS.IGetReportsWithFightsQuery WithHttpClient(global::System.Net.Http.HttpClient httpClient)
        {
            return With(r => r.ContextData["StrawberryShake.Transport.Http.HttpConnection.HttpClient"] = httpClient);
        }

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetReportsWithFightsResult>> ExecuteAsync(global::System.Int32 zoneID, global::System.Int32 page, global::System.Int32 limit, global::System.Int32? difficulty, global::GraphQLClientNS.KillType? killType, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(zoneID, page, limit, difficulty, killType);
            foreach (var configure in _configure)
            {
                configure(request);
            }

            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetReportsWithFightsResult>> Watch(global::System.Int32 zoneID, global::System.Int32 page, global::System.Int32 limit, global::System.Int32? difficulty, global::GraphQLClientNS.KillType? killType, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(zoneID, page, limit, difficulty, killType);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Int32 zoneID, global::System.Int32 page, global::System.Int32 limit, global::System.Int32? difficulty, global::GraphQLClientNS.KillType? killType)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("zoneID", FormatZoneID(zoneID));
            variables.Add("page", FormatPage(page));
            variables.Add("limit", FormatLimit(limit));
            variables.Add("difficulty", FormatDifficulty(difficulty));
            variables.Add("killType", FormatKillType(killType));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetReportsWithFightsQueryDocument.Instance.Hash.Value, name: "GetReportsWithFights", document: GetReportsWithFightsQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatZoneID(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        private global::System.Object? FormatPage(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        private global::System.Object? FormatLimit(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        private global::System.Object? FormatDifficulty(global::System.Int32? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _intFormatter.Format(value);
            }
        }

        private global::System.Object? FormatKillType(global::GraphQLClientNS.KillType? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _killTypeFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetReportsWithFights GraphQL operation
    /// <code>
    /// query GetReportsWithFights($zoneID: Int!, $page: Int!, $limit: Int!, $difficulty: Int, $killType: KillType) {
    ///   reportData {
    ///     __typename
    ///     reports(zoneID: $zoneID, page: $page, limit: $limit) {
    ///       __typename
    ///       data {
    ///         __typename
    ///         zone {
    ///           __typename
    ///           id
    ///           name
    ///           ... on Zone {
    ///             id
    ///           }
    ///         }
    ///         code
    ///         fights(difficulty: $difficulty, killType: $killType) {
    ///           __typename
    ///           id
    ///           name
    ///           trialScore
    ///           ... on ReportFight {
    ///             id
    ///           }
    ///         }
    ///       }
    ///       has_more_pages
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial interface IGetReportsWithFightsQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::GraphQLClientNS.IGetReportsWithFightsQuery With(global::System.Action<global::StrawberryShake.OperationRequest> configure);
        global::GraphQLClientNS.IGetReportsWithFightsQuery WithRequestUri(global::System.Uri requestUri);
        global::GraphQLClientNS.IGetReportsWithFightsQuery WithHttpClient(global::System.Net.Http.HttpClient httpClient);
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetReportsWithFightsResult>> ExecuteAsync(global::System.Int32 zoneID, global::System.Int32 page, global::System.Int32 limit, global::System.Int32? difficulty, global::GraphQLClientNS.KillType? killType, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetReportsWithFightsResult>> Watch(global::System.Int32 zoneID, global::System.Int32 page, global::System.Int32 limit, global::System.Int32? difficulty, global::GraphQLClientNS.KillType? killType, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the GraphQLClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial class GraphQLClient : global::GraphQLClientNS.IGraphQLClient
    {
        private readonly global::GraphQLClientNS.IGetBuffsQuery _getBuffs;
        private readonly global::GraphQLClientNS.IGetFightsQuery _getFights;
        private readonly global::GraphQLClientNS.IGetPlayersQuery _getPlayers;
        private readonly global::GraphQLClientNS.IGetReportsWithFightsQuery _getReportsWithFights;
        public GraphQLClient(global::GraphQLClientNS.IGetBuffsQuery getBuffs, global::GraphQLClientNS.IGetFightsQuery getFights, global::GraphQLClientNS.IGetPlayersQuery getPlayers, global::GraphQLClientNS.IGetReportsWithFightsQuery getReportsWithFights)
        {
            _getBuffs = getBuffs ?? throw new global::System.ArgumentNullException(nameof(getBuffs));
            _getFights = getFights ?? throw new global::System.ArgumentNullException(nameof(getFights));
            _getPlayers = getPlayers ?? throw new global::System.ArgumentNullException(nameof(getPlayers));
            _getReportsWithFights = getReportsWithFights ?? throw new global::System.ArgumentNullException(nameof(getReportsWithFights));
        }

        public static global::System.String ClientName => "GraphQLClient";
        public global::GraphQLClientNS.IGetBuffsQuery GetBuffs => _getBuffs;
        public global::GraphQLClientNS.IGetFightsQuery GetFights => _getFights;
        public global::GraphQLClientNS.IGetPlayersQuery GetPlayers => _getPlayers;
        public global::GraphQLClientNS.IGetReportsWithFightsQuery GetReportsWithFights => _getReportsWithFights;
    }

    /// <summary>
    /// Represents the GraphQLClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial interface IGraphQLClient
    {
        global::GraphQLClientNS.IGetBuffsQuery GetBuffs { get; }

        global::GraphQLClientNS.IGetFightsQuery GetFights { get; }

        global::GraphQLClientNS.IGetPlayersQuery GetPlayers { get; }

        global::GraphQLClientNS.IGetReportsWithFightsQuery GetReportsWithFights { get; }
    }
}

namespace GraphQLClientNS.State
{
    ///<summary>The ReportFight represents a single fight that occurs in the report.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial class ReportFightEntity
    {
        public ReportFightEntity(global::System.Int32 id = default !, global::System.String name = default !, global::System.Double? trialScore = default !)
        {
            Id = id;
            Name = name;
            TrialScore = trialScore;
        }

        ///<summary>The report ID of the fight. This ID can be used to fetch only events, tables or graphs for this fight.</summary>
        public global::System.Int32 Id { get; }
        ///<summary>The name of the fight.</summary>
        public global::System.String Name { get; }
        ///<summary>If the fight is the last encounter in a trial, then the trial score for completion will be present in this field.</summary>
        public global::System.Double? TrialScore { get; }
    }

    ///<summary>A single zone from an expansion that represents a raid, dungeon, arena, etc.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial class ZoneEntity
    {
        public ZoneEntity(global::System.Int32 id = default !, global::System.String name = default !)
        {
            Id = id;
            Name = name;
        }

        ///<summary>The ID of the zone.</summary>
        public global::System.Int32 Id { get; }
        ///<summary>The name of the zone.</summary>
        public global::System.String Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial class GetBuffsResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::GraphQLClientNS.GetBuffsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetBuffsResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::GraphQLClientNS.IGetBuffsResult);

        public GetBuffsResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetBuffsResultInfo info)
            {
                return new GetBuffsResult(MapIGetBuffs_ReportData(info.ReportData, snapshot));
            }

            throw new global::System.ArgumentException("GetBuffsResultInfo expected.");
        }

        private global::GraphQLClientNS.IGetBuffs_ReportData? MapIGetBuffs_ReportData(global::GraphQLClientNS.State.ReportDataData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetBuffs_ReportData returnValue = default !;
            if (data?.__typename.Equals("ReportData", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetBuffs_ReportData_ReportData(MapIGetBuffs_ReportData_Report(data.Report, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::GraphQLClientNS.IGetBuffs_ReportData_Report? MapIGetBuffs_ReportData_Report(global::GraphQLClientNS.State.ReportData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetBuffs_ReportData_Report returnValue = default !;
            if (data?.__typename.Equals("Report", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetBuffs_ReportData_Report_Report(data.Table);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial class GetBuffsResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetBuffsResultInfo(global::GraphQLClientNS.State.ReportDataData? reportData, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            ReportData = reportData;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Obtain the report data object that allows the retrieval of individual reports or filtered collections of reports by guild or by user.
        /// </summary>
        public global::GraphQLClientNS.State.ReportDataData? ReportData { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetBuffsResultInfo(ReportData, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial class GetFightsResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::GraphQLClientNS.GetFightsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::GraphQLClientNS.State.ReportFightEntity, GetFights_ReportData_Report_Fights_ReportFight> _getFights_ReportData_Report_Fights_ReportFightFromReportFightEntityMapper;
        public GetFightsResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::GraphQLClientNS.State.ReportFightEntity, GetFights_ReportData_Report_Fights_ReportFight> getFights_ReportData_Report_Fights_ReportFightFromReportFightEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getFights_ReportData_Report_Fights_ReportFightFromReportFightEntityMapper = getFights_ReportData_Report_Fights_ReportFightFromReportFightEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getFights_ReportData_Report_Fights_ReportFightFromReportFightEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::GraphQLClientNS.IGetFightsResult);

        public GetFightsResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetFightsResultInfo info)
            {
                return new GetFightsResult(MapIGetFights_ReportData(info.ReportData, snapshot));
            }

            throw new global::System.ArgumentException("GetFightsResultInfo expected.");
        }

        private global::GraphQLClientNS.IGetFights_ReportData? MapIGetFights_ReportData(global::GraphQLClientNS.State.ReportDataData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetFights_ReportData returnValue = default !;
            if (data?.__typename.Equals("ReportData", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetFights_ReportData_ReportData(MapIGetFights_ReportData_Report(data.Report, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::GraphQLClientNS.IGetFights_ReportData_Report? MapIGetFights_ReportData_Report(global::GraphQLClientNS.State.ReportData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetFights_ReportData_Report returnValue = default !;
            if (data?.__typename.Equals("Report", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetFights_ReportData_Report_Report(MapIGetFights_ReportData_Report_FightsArray(data.Fights, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::GraphQLClientNS.IGetFights_ReportData_Report_Fights?>? MapIGetFights_ReportData_Report_FightsArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var reportFights = new global::System.Collections.Generic.List<global::GraphQLClientNS.IGetFights_ReportData_Report_Fights?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                reportFights.Add(MapIGetFights_ReportData_Report_Fights(child, snapshot));
            }

            return reportFights;
        }

        private global::GraphQLClientNS.IGetFights_ReportData_Report_Fights? MapIGetFights_ReportData_Report_Fights(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ReportFight", global::System.StringComparison.Ordinal))
            {
                return _getFights_ReportData_Report_Fights_ReportFightFromReportFightEntityMapper.Map(snapshot.GetEntity<global::GraphQLClientNS.State.ReportFightEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial class GetFightsResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetFightsResultInfo(global::GraphQLClientNS.State.ReportDataData? reportData, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            ReportData = reportData;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Obtain the report data object that allows the retrieval of individual reports or filtered collections of reports by guild or by user.
        /// </summary>
        public global::GraphQLClientNS.State.ReportDataData? ReportData { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetFightsResultInfo(ReportData, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial class GetPlayersResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::GraphQLClientNS.GetPlayersResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetPlayersResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::GraphQLClientNS.IGetPlayersResult);

        public GetPlayersResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetPlayersResultInfo info)
            {
                return new GetPlayersResult(MapIGetPlayers_ReportData(info.ReportData, snapshot));
            }

            throw new global::System.ArgumentException("GetPlayersResultInfo expected.");
        }

        private global::GraphQLClientNS.IGetPlayers_ReportData? MapIGetPlayers_ReportData(global::GraphQLClientNS.State.ReportDataData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetPlayers_ReportData returnValue = default !;
            if (data?.__typename.Equals("ReportData", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetPlayers_ReportData_ReportData(MapIGetPlayers_ReportData_Report(data.Report, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::GraphQLClientNS.IGetPlayers_ReportData_Report? MapIGetPlayers_ReportData_Report(global::GraphQLClientNS.State.ReportData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetPlayers_ReportData_Report returnValue = default !;
            if (data?.__typename.Equals("Report", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetPlayers_ReportData_Report_Report(data.Table);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial class GetPlayersResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetPlayersResultInfo(global::GraphQLClientNS.State.ReportDataData? reportData, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            ReportData = reportData;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Obtain the report data object that allows the retrieval of individual reports or filtered collections of reports by guild or by user.
        /// </summary>
        public global::GraphQLClientNS.State.ReportDataData? ReportData { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetPlayersResultInfo(ReportData, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial class GetReportsWithFightsResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::GraphQLClientNS.GetReportsWithFightsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::GraphQLClientNS.State.ZoneEntity, GetReportsWithFights_ReportData_Reports_Data_Zone_Zone> _getReportsWithFights_ReportData_Reports_Data_Zone_ZoneFromZoneEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::GraphQLClientNS.State.ReportFightEntity, GetReportsWithFights_ReportData_Reports_Data_Fights_ReportFight> _getReportsWithFights_ReportData_Reports_Data_Fights_ReportFightFromReportFightEntityMapper;
        public GetReportsWithFightsResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::GraphQLClientNS.State.ZoneEntity, GetReportsWithFights_ReportData_Reports_Data_Zone_Zone> getReportsWithFights_ReportData_Reports_Data_Zone_ZoneFromZoneEntityMapper, global::StrawberryShake.IEntityMapper<global::GraphQLClientNS.State.ReportFightEntity, GetReportsWithFights_ReportData_Reports_Data_Fights_ReportFight> getReportsWithFights_ReportData_Reports_Data_Fights_ReportFightFromReportFightEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getReportsWithFights_ReportData_Reports_Data_Zone_ZoneFromZoneEntityMapper = getReportsWithFights_ReportData_Reports_Data_Zone_ZoneFromZoneEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getReportsWithFights_ReportData_Reports_Data_Zone_ZoneFromZoneEntityMapper));
            _getReportsWithFights_ReportData_Reports_Data_Fights_ReportFightFromReportFightEntityMapper = getReportsWithFights_ReportData_Reports_Data_Fights_ReportFightFromReportFightEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getReportsWithFights_ReportData_Reports_Data_Fights_ReportFightFromReportFightEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::GraphQLClientNS.IGetReportsWithFightsResult);

        public GetReportsWithFightsResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetReportsWithFightsResultInfo info)
            {
                return new GetReportsWithFightsResult(MapIGetReportsWithFights_ReportData(info.ReportData, snapshot));
            }

            throw new global::System.ArgumentException("GetReportsWithFightsResultInfo expected.");
        }

        private global::GraphQLClientNS.IGetReportsWithFights_ReportData? MapIGetReportsWithFights_ReportData(global::GraphQLClientNS.State.ReportDataData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetReportsWithFights_ReportData returnValue = default !;
            if (data?.__typename.Equals("ReportData", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetReportsWithFights_ReportData_ReportData(MapIGetReportsWithFights_ReportData_Reports(data.Reports, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::GraphQLClientNS.IGetReportsWithFights_ReportData_Reports? MapIGetReportsWithFights_ReportData_Reports(global::GraphQLClientNS.State.ReportPaginationData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetReportsWithFights_ReportData_Reports returnValue = default !;
            if (data?.__typename.Equals("ReportPagination", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetReportsWithFights_ReportData_Reports_ReportPagination(MapIGetReportsWithFights_ReportData_Reports_DataArray(data.Data, snapshot), data.Has_more_pages ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::GraphQLClientNS.IGetReportsWithFights_ReportData_Reports_Data?>? MapIGetReportsWithFights_ReportData_Reports_DataArray(global::System.Collections.Generic.IReadOnlyList<global::GraphQLClientNS.State.ReportData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var reports = new global::System.Collections.Generic.List<global::GraphQLClientNS.IGetReportsWithFights_ReportData_Reports_Data?>();
            foreach (global::GraphQLClientNS.State.ReportData? child in list)
            {
                reports.Add(MapIGetReportsWithFights_ReportData_Reports_Data(child, snapshot));
            }

            return reports;
        }

        private global::GraphQLClientNS.IGetReportsWithFights_ReportData_Reports_Data? MapIGetReportsWithFights_ReportData_Reports_Data(global::GraphQLClientNS.State.ReportData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetReportsWithFights_ReportData_Reports_Data returnValue = default !;
            if (data?.__typename.Equals("Report", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetReportsWithFights_ReportData_Reports_Data_Report(MapIGetReportsWithFights_ReportData_Reports_Data_Zone(data.Zone, snapshot), data.Code ?? throw new global::System.ArgumentNullException(), MapIGetReportsWithFights_ReportData_Reports_Data_FightsArray(data.Fights, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::GraphQLClientNS.IGetReportsWithFights_ReportData_Reports_Data_Zone? MapIGetReportsWithFights_ReportData_Reports_Data_Zone(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Zone", global::System.StringComparison.Ordinal))
            {
                return _getReportsWithFights_ReportData_Reports_Data_Zone_ZoneFromZoneEntityMapper.Map(snapshot.GetEntity<global::GraphQLClientNS.State.ZoneEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::GraphQLClientNS.IGetReportsWithFights_ReportData_Reports_Data_Fights?>? MapIGetReportsWithFights_ReportData_Reports_Data_FightsArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var reportFights = new global::System.Collections.Generic.List<global::GraphQLClientNS.IGetReportsWithFights_ReportData_Reports_Data_Fights?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                reportFights.Add(MapIGetReportsWithFights_ReportData_Reports_Data_Fights(child, snapshot));
            }

            return reportFights;
        }

        private global::GraphQLClientNS.IGetReportsWithFights_ReportData_Reports_Data_Fights? MapIGetReportsWithFights_ReportData_Reports_Data_Fights(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ReportFight", global::System.StringComparison.Ordinal))
            {
                return _getReportsWithFights_ReportData_Reports_Data_Fights_ReportFightFromReportFightEntityMapper.Map(snapshot.GetEntity<global::GraphQLClientNS.State.ReportFightEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial class GetReportsWithFightsResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetReportsWithFightsResultInfo(global::GraphQLClientNS.State.ReportDataData? reportData, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            ReportData = reportData;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Obtain the report data object that allows the retrieval of individual reports or filtered collections of reports by guild or by user.
        /// </summary>
        public global::GraphQLClientNS.State.ReportDataData? ReportData { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetReportsWithFightsResultInfo(ReportData, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial class GetBuffsBuilder : global::StrawberryShake.OperationResultBuilder<global::GraphQLClientNS.IGetBuffsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Text.Json.JsonElement, global::System.Text.Json.JsonElement> _jSONParser;
        public GetBuffsBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::GraphQLClientNS.IGetBuffsResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _jSONParser = serializerResolver.GetLeafValueParser<global::System.Text.Json.JsonElement, global::System.Text.Json.JsonElement>("JSON") ?? throw new global::System.ArgumentException("No serializer for type `JSON` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::GraphQLClientNS.IGetBuffsResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            return new GetBuffsResultInfo(Deserialize_IGetBuffs_ReportData(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "reportData")), entityIds, snapshot.Version);
        }

        private global::GraphQLClientNS.State.ReportDataData? Deserialize_IGetBuffs_ReportData(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ReportData", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::GraphQLClientNS.State.ReportDataData(typename, report: Deserialize_IGetBuffs_ReportData_Report(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "report")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::GraphQLClientNS.State.ReportData? Deserialize_IGetBuffs_ReportData_Report(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Report", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::GraphQLClientNS.State.ReportData(typename, table: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "table")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Text.Json.JsonElement? Deserialize_JsonElement(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _jSONParser.Parse(obj.Value!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial class GetFightsBuilder : global::StrawberryShake.OperationResultBuilder<global::GraphQLClientNS.IGetFightsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public GetFightsBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::GraphQLClientNS.IGetFightsResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::GraphQLClientNS.IGetFightsResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::GraphQLClientNS.State.ReportDataData? reportDataId = default !;
            _entityStore.Update(session =>
            {
                reportDataId = Deserialize_IGetFights_ReportData(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "reportData"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            return new GetFightsResultInfo(reportDataId, entityIds, snapshot.Version);
        }

        private global::GraphQLClientNS.State.ReportDataData? Deserialize_IGetFights_ReportData(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ReportData", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::GraphQLClientNS.State.ReportDataData(typename, report: Deserialize_IGetFights_ReportData_Report(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "report"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::GraphQLClientNS.State.ReportData? Deserialize_IGetFights_ReportData_Report(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Report", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::GraphQLClientNS.State.ReportData(typename, fights: Update_IGetFights_ReportData_Report_FightsEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "fights"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? Update_IGetFights_ReportData_Report_FightsEntityArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var reportFights = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                reportFights.Add(Update_IGetFights_ReportData_Report_FightsEntity(session, child, entityIds));
            }

            return reportFights;
        }

        private global::StrawberryShake.EntityId? Update_IGetFights_ReportData_Report_FightsEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("ReportFight", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::GraphQLClientNS.State.ReportFightEntity? entity))
                {
                    session.SetEntity(entityId, new global::GraphQLClientNS.State.ReportFightEntity(Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), entity.TrialScore));
                }
                else
                {
                    session.SetEntity(entityId, new global::GraphQLClientNS.State.ReportFightEntity(Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 Deserialize_NonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String Deserialize_NonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial class GetPlayersBuilder : global::StrawberryShake.OperationResultBuilder<global::GraphQLClientNS.IGetPlayersResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Text.Json.JsonElement, global::System.Text.Json.JsonElement> _jSONParser;
        public GetPlayersBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::GraphQLClientNS.IGetPlayersResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _jSONParser = serializerResolver.GetLeafValueParser<global::System.Text.Json.JsonElement, global::System.Text.Json.JsonElement>("JSON") ?? throw new global::System.ArgumentException("No serializer for type `JSON` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::GraphQLClientNS.IGetPlayersResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            return new GetPlayersResultInfo(Deserialize_IGetPlayers_ReportData(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "reportData")), entityIds, snapshot.Version);
        }

        private global::GraphQLClientNS.State.ReportDataData? Deserialize_IGetPlayers_ReportData(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ReportData", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::GraphQLClientNS.State.ReportDataData(typename, report: Deserialize_IGetPlayers_ReportData_Report(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "report")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::GraphQLClientNS.State.ReportData? Deserialize_IGetPlayers_ReportData_Report(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Report", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::GraphQLClientNS.State.ReportData(typename, table: Deserialize_JsonElement(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "table")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Text.Json.JsonElement? Deserialize_JsonElement(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _jSONParser.Parse(obj.Value!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial class GetReportsWithFightsBuilder : global::StrawberryShake.OperationResultBuilder<global::GraphQLClientNS.IGetReportsWithFightsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::GraphQLClientNS.KillType> _killTypeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Double, global::System.Double> _floatParser;
        public GetReportsWithFightsBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::GraphQLClientNS.IGetReportsWithFightsResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _killTypeParser = serializerResolver.GetLeafValueParser<global::System.String, global::GraphQLClientNS.KillType>("KillType") ?? throw new global::System.ArgumentException("No serializer for type `KillType` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _floatParser = serializerResolver.GetLeafValueParser<global::System.Double, global::System.Double>("Float") ?? throw new global::System.ArgumentException("No serializer for type `Float` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::GraphQLClientNS.IGetReportsWithFightsResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::GraphQLClientNS.State.ReportDataData? reportDataId = default !;
            _entityStore.Update(session =>
            {
                reportDataId = Deserialize_IGetReportsWithFights_ReportData(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "reportData"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            return new GetReportsWithFightsResultInfo(reportDataId, entityIds, snapshot.Version);
        }

        private global::GraphQLClientNS.State.ReportDataData? Deserialize_IGetReportsWithFights_ReportData(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ReportData", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::GraphQLClientNS.State.ReportDataData(typename, reports: Deserialize_IGetReportsWithFights_ReportData_Reports(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "reports"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::GraphQLClientNS.State.ReportPaginationData? Deserialize_IGetReportsWithFights_ReportData_Reports(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ReportPagination", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::GraphQLClientNS.State.ReportPaginationData(typename, data: Deserialize_IGetReportsWithFights_ReportData_Reports_DataArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "data"), entityIds), has_More_Pages: Deserialize_NonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "has_more_pages")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::GraphQLClientNS.State.ReportData?>? Deserialize_IGetReportsWithFights_ReportData_Reports_DataArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var reports = new global::System.Collections.Generic.List<global::GraphQLClientNS.State.ReportData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                reports.Add(Deserialize_IGetReportsWithFights_ReportData_Reports_Data(session, child, entityIds));
            }

            return reports;
        }

        private global::GraphQLClientNS.State.ReportData? Deserialize_IGetReportsWithFights_ReportData_Reports_Data(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Report", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::GraphQLClientNS.State.ReportData(typename, zone: Update_IGetReportsWithFights_ReportData_Reports_Data_ZoneEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "zone"), entityIds), code: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), fights: Update_IGetReportsWithFights_ReportData_Reports_Data_FightsEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "fights"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? Update_IGetReportsWithFights_ReportData_Reports_Data_ZoneEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Zone", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::GraphQLClientNS.State.ZoneEntity? entity))
                {
                    session.SetEntity(entityId, new global::GraphQLClientNS.State.ZoneEntity(Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::GraphQLClientNS.State.ZoneEntity(Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 Deserialize_NonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String Deserialize_NonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? Update_IGetReportsWithFights_ReportData_Reports_Data_FightsEntityArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var reportFights = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                reportFights.Add(Update_IGetReportsWithFights_ReportData_Reports_Data_FightsEntity(session, child, entityIds));
            }

            return reportFights;
        }

        private global::StrawberryShake.EntityId? Update_IGetReportsWithFights_ReportData_Reports_Data_FightsEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("ReportFight", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::GraphQLClientNS.State.ReportFightEntity? entity))
                {
                    session.SetEntity(entityId, new global::GraphQLClientNS.State.ReportFightEntity(Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), Deserialize_Double(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "trialScore"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::GraphQLClientNS.State.ReportFightEntity(Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), Deserialize_Double(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "trialScore"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Double? Deserialize_Double(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _floatParser.Parse(obj.Value.GetDouble()!);
        }

        private global::System.Boolean Deserialize_NonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }
    }

    ///<summary>The ReportData object enables the retrieval of single reports or filtered collections of reports.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial class ReportDataData
    {
        public ReportDataData(global::System.String __typename, global::GraphQLClientNS.State.ReportData? report = default !, global::GraphQLClientNS.State.ReportPaginationData? reports = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Report = report;
            Reports = reports;
        }

        public global::System.String __typename { get; }
        ///<summary>Obtain a specific report by its code.</summary>
        public global::GraphQLClientNS.State.ReportData? Report { get; }
        ///<summary>A set of reports for a specific guild, guild tag, or user.</summary>
        public global::GraphQLClientNS.State.ReportPaginationData? Reports { get; }
    }

    ///<summary>A single report uploaded by a player to a guild or personal logs.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial class ReportData
    {
        public ReportData(global::System.String __typename, global::System.Text.Json.JsonElement? table = default !, global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? fights = default !, global::StrawberryShake.EntityId? zone = default !, global::System.String? code = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Table = table;
            Fights = fights;
            Zone = zone;
            Code = code;
        }

        public global::System.String __typename { get; }
        ///<summary>A table of information for a report, filterable via arguments like type, source, target, ability, etc. This data is not considered frozen, and it can change without notice. Use at your own risk.</summary>
        public global::System.Text.Json.JsonElement? Table { get; }
        ///<summary>A set of fights with details about participating players.</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? Fights { get; }
        ///<summary>The principal zone that the report contains fights for. Null if no supported zone exists.</summary>
        public global::StrawberryShake.EntityId? Zone { get; }
        ///<summary>The report code, a unique value used to identify the report.</summary>
        public global::System.String? Code { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial class ReportPaginationData
    {
        public ReportPaginationData(global::System.String __typename, global::System.Collections.Generic.IReadOnlyList<global::GraphQLClientNS.State.ReportData?>? data = default !, global::System.Boolean? has_More_Pages = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Data = data;
            Has_more_pages = has_More_Pages;
        }

        public global::System.String __typename { get; }
        ///<summary>List of items on the current page</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::GraphQLClientNS.State.ReportData?>? Data { get; }
        ///<summary>Determines if cursor has more pages after the current page</summary>
        public global::System.Boolean? Has_more_pages { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial class GetFights_ReportData_Report_Fights_ReportFightFromReportFightEntityMapper : global::StrawberryShake.IEntityMapper<global::GraphQLClientNS.State.ReportFightEntity, GetFights_ReportData_Report_Fights_ReportFight>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetFights_ReportData_Report_Fights_ReportFightFromReportFightEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetFights_ReportData_Report_Fights_ReportFight Map(global::GraphQLClientNS.State.ReportFightEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetFights_ReportData_Report_Fights_ReportFight(entity.Id, entity.Name);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial class GetReportsWithFights_ReportData_Reports_Data_Zone_ZoneFromZoneEntityMapper : global::StrawberryShake.IEntityMapper<global::GraphQLClientNS.State.ZoneEntity, GetReportsWithFights_ReportData_Reports_Data_Zone_Zone>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetReportsWithFights_ReportData_Reports_Data_Zone_ZoneFromZoneEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetReportsWithFights_ReportData_Reports_Data_Zone_Zone Map(global::GraphQLClientNS.State.ZoneEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetReportsWithFights_ReportData_Reports_Data_Zone_Zone(entity.Id, entity.Name);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial class GetReportsWithFights_ReportData_Reports_Data_Fights_ReportFightFromReportFightEntityMapper : global::StrawberryShake.IEntityMapper<global::GraphQLClientNS.State.ReportFightEntity, GetReportsWithFights_ReportData_Reports_Data_Fights_ReportFight>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetReportsWithFights_ReportData_Reports_Data_Fights_ReportFightFromReportFightEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetReportsWithFights_ReportData_Reports_Data_Fights_ReportFight Map(global::GraphQLClientNS.State.ReportFightEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetReportsWithFights_ReportData_Reports_Data_Fights_ReportFight(entity.Id, entity.Name, entity.TrialScore);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial class GraphQLClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {
            Indented = false
        };
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
                "ReportFight" => ParseReportFightEntityId(obj, __typename),
                "Zone" => ParseZoneEntityId(obj, __typename),
                _ => throw new global::System.NotSupportedException()};
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
                "ReportFight" => FormatReportFightEntityId(entityId),
                "Zone" => FormatZoneEntityId(entityId),
                _ => throw new global::System.NotSupportedException()};
        }

        private global::StrawberryShake.EntityId ParseReportFightEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatReportFightEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseZoneEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatZoneEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public partial class GraphQLClientStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public GraphQLClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories) : base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.7.0")]
    public static partial class GraphQLClientServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::GraphQLClientNS.State.GraphQLClientStoreAccessor> AddGraphQLClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClient(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::GraphQLClientNS.State.GraphQLClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLClientNS.GetBuffsQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLClientNS.GetFightsQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLClientNS.GetPlayersQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLClientNS.GetReportsWithFightsQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLClientNS.GraphQLClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLClientNS.IGraphQLClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::GraphQLClientNS.State.GraphQLClientStoreAccessor>("GraphQLClient", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClient(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("GraphQLClient"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::GraphQLClientNS.State.ReportFightEntity, global::GraphQLClientNS.GetFights_ReportData_Report_Fights_ReportFight>, global::GraphQLClientNS.State.GetFights_ReportData_Report_Fights_ReportFightFromReportFightEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::GraphQLClientNS.State.ZoneEntity, global::GraphQLClientNS.GetReportsWithFights_ReportData_Reports_Data_Zone_Zone>, global::GraphQLClientNS.State.GetReportsWithFights_ReportData_Reports_Data_Zone_ZoneFromZoneEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::GraphQLClientNS.State.ReportFightEntity, global::GraphQLClientNS.GetReportsWithFights_ReportData_Reports_Data_Fights_ReportFight>, global::GraphQLClientNS.State.GetReportsWithFights_ReportData_Reports_Data_Fights_ReportFightFromReportFightEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::GraphQLClientNS.KillTypeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LocalDateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LocalDateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LocalTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.JsonSerializer("JSON"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::GraphQLClientNS.IGetBuffsResult>, global::GraphQLClientNS.State.GetBuffsResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::GraphQLClientNS.IGetBuffsResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLClientNS.IGetBuffsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQLClientNS.IGetBuffsResult>, global::GraphQLClientNS.State.GetBuffsBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::GraphQLClientNS.IGetBuffsResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::GraphQLClientNS.IGetBuffsResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQLClientNS.IGetBuffsResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphQLClientNS.GetBuffsQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphQLClientNS.IGetBuffsQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLClientNS.GetBuffsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::GraphQLClientNS.IGetFightsResult>, global::GraphQLClientNS.State.GetFightsResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::GraphQLClientNS.IGetFightsResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLClientNS.IGetFightsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQLClientNS.IGetFightsResult>, global::GraphQLClientNS.State.GetFightsBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::GraphQLClientNS.IGetFightsResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::GraphQLClientNS.IGetFightsResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQLClientNS.IGetFightsResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphQLClientNS.GetFightsQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphQLClientNS.IGetFightsQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLClientNS.GetFightsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::GraphQLClientNS.IGetPlayersResult>, global::GraphQLClientNS.State.GetPlayersResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::GraphQLClientNS.IGetPlayersResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLClientNS.IGetPlayersQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQLClientNS.IGetPlayersResult>, global::GraphQLClientNS.State.GetPlayersBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::GraphQLClientNS.IGetPlayersResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::GraphQLClientNS.IGetPlayersResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQLClientNS.IGetPlayersResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphQLClientNS.GetPlayersQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphQLClientNS.IGetPlayersQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLClientNS.GetPlayersQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::GraphQLClientNS.IGetReportsWithFightsResult>, global::GraphQLClientNS.State.GetReportsWithFightsResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::GraphQLClientNS.IGetReportsWithFightsResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLClientNS.IGetReportsWithFightsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQLClientNS.IGetReportsWithFightsResult>, global::GraphQLClientNS.State.GetReportsWithFightsBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::GraphQLClientNS.IGetReportsWithFightsResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::GraphQLClientNS.IGetReportsWithFightsResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQLClientNS.IGetReportsWithFightsResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphQLClientNS.GetReportsWithFightsQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphQLClientNS.IGetReportsWithFightsQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLClientNS.GetReportsWithFightsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::GraphQLClientNS.State.GraphQLClientEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphQLClientNS.GraphQLClient>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphQLClientNS.IGraphQLClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLClientNS.GraphQLClient>(sp));
            return services;
        }

        private sealed class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}
